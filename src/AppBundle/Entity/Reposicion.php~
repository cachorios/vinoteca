<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

use RBSoft\UsuarioBundle\Entity\SecureControl;
use Symfony\Bridge\Doctrine\Validator\Constraints as DoctrineAssert;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\ORM\Mapping\UniqueConstraint;
use RBSoft\UtilidadBundle\Validator\Constraints as UtilidadAssert;
use RBSoft\UsuarioBundle\Entity\Usuario;

/**
 * Reposicion
 *
 * @ORM\Entity(repositoryClass="AppBundle\Entity\ReposicionRepository")
 *
 * @ORM\HasLifecycleCallbacks()
 */
class Reposicion
//    implements SecureControl
{
    /**
     * @var integer
     *
     * @ORM\Column(type="integer", name="id")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;


    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Proveedor")
     * @ORM\JoinColumn(name="proveedor_id", referencedColumnName="id")
     * @Assert\Type("AppBundle\Entity\Proveedor")
     * @Assert\NotNull()
     */
    private $proveedor;

    /**
     * @var \DateTime
     *
     * @ORM\Column(type="datetime", nullable=true, name="fecha_reposicion")
     */
    private $fechaReposicion;

    /**
     * @var \DateTime
     *
     * @ORM\Column(type="datetime", nullable=true, name="fecha_alta")
     */
    private $fechaAlta;

    /**
     * @ORM\Column(name="factura_numero", type="string", nullable=true)
     */
    private $facturaNumero;

    /**
     * @var integer
     *
     * @ORM\Column(name="codigo", type="string", length=150, nullable=false)
     */
    private $codigo;

    /**
     * @ORM\ManyToOne(targetEntity="RBSoft\UsuarioBundle\Entity\Usuario")
     * @ORM\JoinColumn(name="usuario_id", referencedColumnName="id")
     */
    private $usuario;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\ReposicionItem", mappedBy="reposicion", cascade={"persist","remove"})
     * @Assert\Count(
     *      min = "1",
     *      max = "50",
     *      minMessage = "Debe especificar al menos un item",
     *      maxMessage = "No se puede especificar mÃ¡s de {{ limit }} items"
     * )
     */
    private $items;

    public function __toString()
    {
        return $this->getFacturaNumero();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @ORM\PrePersist
     */
    public function PrePersist()
    {
        $this->setFechaAlta(new \DateTime('now', new \DateTimeZone('UTC')));
    }
}
